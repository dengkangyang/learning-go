package main

import (
	"bytes"
	"fmt"
	"io"
	"io/ioutil"
	"mime/multipart"
	"net/http"
	"os"
)

func main() {
	url := "http://localhost:8999/tech-sdkwrapper/timevale/sign/userStreamSign"
	// url := "http://127.0.0.1:5011"

	params := make(map[string]string)
	params["signType"] = "Single"
	params["accountId"] = "CF71BD99B7F243148008F1F92D63A663"
	params["sealData"] = ``
	params["signPos"] = `{
		"posType": 0,
		"posPage": "1",
		"posX": 500,
		"posY": 100
	}`
	params["dstPdfFile"] = "/Users/pathbox/edst_file/0001_ok_done.pdf"

	client := NewHTTPClient()
	file, _ := os.Open("/Users/pathbox/edst_file/0001_done.pdf")
	defer file.Close()
	buf := &bytes.Buffer{}
	mw := multipart.NewWriter(buf)

	fw, err := mw.CreateFormFile("file", "0001_done.pdf")
	if err != nil {
		panic(err)
	}

	_, err = io.Copy(fw, file)

	for key, val := range params {
		_ = mw.WriteField(key, val)
	}
	err = mw.Close() // 要在 http.NewRequest client.Do 之前就Close，不能 defer mw.Close() 这样会导致产生不合法协议的multipart/form-data 请求
	if err != nil {
		panic(err)
	}
	req, err := http.NewRequest("POST", url, buf)
	if err != nil {
		panic(err)
	}
	req.Header.Set("Content-Type", mw.FormDataContentType())

	resp, err := client.Do(req)
	if err != nil {
		panic(err)
	}

	rb, err := ioutil.ReadAll(resp.Body)
	if err != nil {
		panic(err)
	}

	defer resp.Body.Close()
	fmt.Println("After request: ", resp.StatusCode)
	fmt.Println(string(rb))

}

func NewHTTPClient() *http.Client {
	// transport := &http.Transport{
	// 	Dial: (&net.Dialer{
	// 		Timeout: 30 * time.Second,
	// 	}).Dial,
	// 	TLSHandshakeTimeout:   15 * time.Second,
	// 	ResponseHeaderTimeout: 30 * time.Second,
	// }

	// client := &http.Client{
	// 	Timeout:   30 * time.Second,
	// 	Transport: transport,
	// }
	client := &http.Client{}
	return client
}
